yTrainActivity <- gsub(i,activities[i,2],x = as.character(yTrain[,1]))
}
str(yTrainActivity)
str(yTrain)
yTrain[,1] <- as.character(yTrain[.1])
yTrain[,1] <- as.character(yTrain[,1])
str(yTrain)
yTrain <- read.table(file = "H:\\DataScienceWorkspace\\GettingAndCleaningData\\UCI HAR Dataset\\train\\y_train.txt",header = F,)
sm <- gsub(5,"walking", yTrain[,1])
head(sm)
activities[5,2]
for(i in 1:6) {
yTrainActivity <- gsub(i,activities[i,2],x = yTrain[,1])
}
head(yTrainActivity)
for(i in 5) {
yTrainActivity <- gsub(i,activities[i,2],x = (yTrain[,1]))
}
head(yTrainActivity)
for(i in c(1:6)) {
yTrainActivity <- gsub(i,activities[i,2],x = yTrain[,1])
}
head(yTrainActivity)
for(i in activities[,1]) {
yTrainActivity <- gsub(i,activities[i,2],x = yTrain[,1])
}
head(yTrainActivity)
class(activities[,1])
?for
?
str(for)
head(yTrain)
str(yTrain)
str(activites)
activities <- read.table(file = "H:\\DataScienceWorkspace\\GettingAndCleaningData\\UCI HAR Dataset\\activity_labels.txt",header = F,stringsAsFactors = F)
str(activites)
str(activities)
names(activites) <- c("no","name")
names(activities) <- c("no","name")
str(activites)
str(activities)
str(yTrain)
names(yTrain) <- c("no")
merged <- merge(activities, yTrain, by.x="no",by.y="no", all=F)
str(merged)
head(merged)
merged <- merge(yTrain, activities, by.x="no",by.y="no", all=F)
str(merged)
head(merged)
head(yTrain)
merged <- merge(yTrain, activities, by.x="no",by.y="no", all=F,sort = F)
head(merged)
str(merged)
table(yTrain)
table(merged$name)
cleanup <- function() {
baseDir <- "H:\\DataScienceWorkspace\\GettingAndCleaningData\\UCI HAR Dataset"
testDir <- paste(baseDir,"test",sep = "\\")
trainDir <- paste(baseDir,"train",sep = "\\")
subjectTrain <- read.table(file = paste(trainDir,"subject_train.txt",sep = "\\"),header = F)
xTrain <- read.table(file = paste(trainDir,"X_train.txt",sep = "\\"),header = F)
yTrain <- read.table(file = paste(trainDir,"y_train.txt",sep = "\\"),header = F,)
features <- read.table(file = paste(baseDir,"features.txt",sep = "\\"),header = F,stringsAsFactors = F)
activities <- read.table(file = paste(baseDir,"activity_labels.txt",sep = "\\"),header = F,stringsAsFactors = F)
yTrainActivity <- merge(yTrain, activities, by.x="V1",by.y="V1", all=F,sort = F)
#names(xTrain) <- features[,2]
#xTrainMean <- xTrain[,grep(pattern = "mean",names(xTrain))]
#xTrainStd <- xTrain[,grep(pattern = "std",names(xTrain))]
#finalXTrain <- c(xTrainMean, xTrainStd)
#trainData <- data.frame(subject = subjectTrain[,1], activity = yTrainActivity, finalXTrain)
#head(trainData)
str(yTrainActivity)
}
cleanup()
cleanup <- function() {
baseDir <- "H:\\DataScienceWorkspace\\GettingAndCleaningData\\UCI HAR Dataset"
testDir <- paste(baseDir,"test",sep = "\\")
trainDir <- paste(baseDir,"train",sep = "\\")
subjectTrain <- read.table(file = paste(trainDir,"subject_train.txt",sep = "\\"),header = F)
xTrain <- read.table(file = paste(trainDir,"X_train.txt",sep = "\\"),header = F)
yTrain <- read.table(file = paste(trainDir,"y_train.txt",sep = "\\"),header = F,)
features <- read.table(file = paste(baseDir,"features.txt",sep = "\\"),header = F,stringsAsFactors = F)
activities <- read.table(file = paste(baseDir,"activity_labels.txt",sep = "\\"),header = F,stringsAsFactors = F)
yTrainActivity <- merge(yTrain, activities, by.x="V1",by.y="V1", all=F,sort = F)
names(xTrain) <- features[,2]
xTrainMean <- xTrain[,grep(pattern = "mean",names(xTrain))]
xTrainStd <- xTrain[,grep(pattern = "std",names(xTrain))]
finalXTrain <- c(xTrainMean, xTrainStd)
trainData <- data.frame(subject = subjectTrain[,1], activity = yTrainActivity[,2], finalXTrain)
head(trainData)
}
cleanup()
cleanup <- function() {
baseDir <- "H:\\DataScienceWorkspace\\GettingAndCleaningData\\UCI HAR Dataset"
testDir <- paste(baseDir,"test",sep = "\\")
trainDir <- paste(baseDir,"train",sep = "\\")
subjectTrain <- read.table(file = paste(trainDir,"subject_train.txt",sep = "\\"),header = F)
xTrain <- read.table(file = paste(trainDir,"X_train.txt",sep = "\\"),header = F)
yTrain <- read.table(file = paste(trainDir,"y_train.txt",sep = "\\"),header = F,)
features <- read.table(file = paste(baseDir,"features.txt",sep = "\\"),header = F,stringsAsFactors = F)
activities <- read.table(file = paste(baseDir,"activity_labels.txt",sep = "\\"),header = F,stringsAsFactors = F)
yTrainActivity <- merge(yTrain, activities, by.x="V1",by.y="V1", all=F,sort = F)
names(xTrain) <- features[,2]
xTrainMean <- xTrain[,grep(pattern = "mean",names(xTrain))]
xTrainStd <- xTrain[,grep(pattern = "std",names(xTrain))]
finalXTrain <- c(xTrainMean, xTrainStd)
trainData <- data.frame(subject = subjectTrain[,1], activity = yTrainActivity[,2], finalXTrain)
subjectTest <- read.table(file = paste(testDir,"subject_test.txt",sep = "\\"),header = F)
xTest <- read.table(file = paste(testDir,"X_test.txt",sep = "\\"),header = F)
yTest <- read.table(file = paste(testDir,"y_test.txt",sep = "\\"),header = F,)
yTestActivity <- merge(yTest, activities, by.x="V1",by.y="V1", all=F,sort = F)
names(xTest) <- features[,2]
xTestMean <- xTest[,grep(pattern = "mean",names(xTest))]
xTestStd <- xTest[,grep(pattern = "std",names(xTest))]
finalXTest <- c(xTestMean, xTestStd)
testData <- data.frame(subject = subjectTest[,1], activity = yTestActivity[,2], finalXTest)
str(trainData)
str(testData)
}
cleanup()
cleanup <- function() {
baseDir <- "H:\\DataScienceWorkspace\\GettingAndCleaningData\\UCI HAR Dataset"
testDir <- paste(baseDir,"test",sep = "\\")
trainDir <- paste(baseDir,"train",sep = "\\")
subjectTrain <- read.table(file = paste(trainDir,"subject_train.txt",sep = "\\"),header = F)
xTrain <- read.table(file = paste(trainDir,"X_train.txt",sep = "\\"),header = F)
yTrain <- read.table(file = paste(trainDir,"y_train.txt",sep = "\\"),header = F,)
features <- read.table(file = paste(baseDir,"features.txt",sep = "\\"),header = F,stringsAsFactors = F)
activities <- read.table(file = paste(baseDir,"activity_labels.txt",sep = "\\"),header = F,stringsAsFactors = F)
yTrainActivity <- merge(yTrain, activities, by.x="V1",by.y="V1", all=F,sort = F)
names(xTrain) <- features[,2]
xTrainMean <- xTrain[,grep(pattern = "mean",names(xTrain))]
xTrainStd <- xTrain[,grep(pattern = "std",names(xTrain))]
finalXTrain <- c(xTrainMean, xTrainStd)
trainData <- data.frame(subject = subjectTrain[,1], activity = yTrainActivity[,2], finalXTrain)
subjectTest <- read.table(file = paste(testDir,"subject_test.txt",sep = "\\"),header = F)
xTest <- read.table(file = paste(testDir,"X_test.txt",sep = "\\"),header = F)
yTest <- read.table(file = paste(testDir,"y_test.txt",sep = "\\"),header = F,)
yTestActivity <- merge(yTest, activities, by.x="V1",by.y="V1", all=F,sort = F)
names(xTest) <- features[,2]
xTestMean <- xTest[,grep(pattern = "mean",names(xTest))]
xTestStd <- xTest[,grep(pattern = "std",names(xTest))]
finalXTest <- c(xTestMean, xTestStd)
testData <- data.frame(subject = subjectTest[,1], activity = yTestActivity[,2], finalXTest)
galaxyData <- rbind(trainData, testData)
str(galaxyData)
}
cleanup()
cleanup <- function() {
#Setting up the directory values
baseDir <- "H:\\DataScienceWorkspace\\GettingAndCleaningData\\UCI HAR Dataset"
testDir <- paste(baseDir,"test",sep = "\\")
trainDir <- paste(baseDir,"train",sep = "\\")
#Reading features and activites, common to both test and training data.
features <- read.table(file = paste(baseDir,"features.txt",sep = "\\"),header = F,stringsAsFactors = F)
activities <- read.table(file = paste(baseDir,"activity_labels.txt",sep = "\\"),header = F,stringsAsFactors = F)
#Reading training data first, subject_train, xTrain and yTrain
subjectTrain <- read.table(file = paste(trainDir,"subject_train.txt",sep = "\\"),header = F)
xTrain <- read.table(file = paste(trainDir,"X_train.txt",sep = "\\"),header = F)
yTrain <- read.table(file = paste(trainDir,"y_train.txt",sep = "\\"),header = F,)
#Getting activity name for activity no
yTrainActivity <- merge(yTrain, activities, by.x="V1",by.y="V1", all=F,sort = F)
#naming x train based on deatures
names(xTrain) <- features[,2]
#Finding columns with mean and std
xTrainMean <- xTrain[,grep(pattern = "mean",names(xTrain))]
xTrainStd <- xTrain[,grep(pattern = "std",names(xTrain))]
finalXTrain <- c(xTrainMean, xTrainStd)
#Combining subject, activity and different mean and std measurements.
trainData <- data.frame(subject = subjectTrain[,1], activity = yTrainActivity[,2], finalXTrain)
#Similarly for test data
subjectTest <- read.table(file = paste(testDir,"subject_test.txt",sep = "\\"),header = F)
xTest <- read.table(file = paste(testDir,"X_test.txt",sep = "\\"),header = F)
yTest <- read.table(file = paste(testDir,"y_test.txt",sep = "\\"),header = F,)
yTestActivity <- merge(yTest, activities, by.x="V1",by.y="V1", all=F,sort = F)
names(xTest) <- features[,2]
xTestMean <- xTest[,grep(pattern = "mean",names(xTest))]
xTestStd <- xTest[,grep(pattern = "std",names(xTest))]
finalXTest <- c(xTestMean, xTestStd)
testData <- data.frame(subject = subjectTest[,1], activity = yTestActivity[,2], finalXTest)
#Combining both test and train data
galaxyData <- rbind(trainData, testData)
str(galaxyData)
}
cleanup()
cleanup <- function() {
#Setting up the directory values
baseDir <- "H:\\DataScienceWorkspace\\GettingAndCleaningData\\UCI HAR Dataset"
testDir <- paste(baseDir,"test",sep = "\\")
trainDir <- paste(baseDir,"train",sep = "\\")
#Reading features and activites, common to both test and training data.
features <- read.table(file = paste(baseDir,"features.txt",sep = "\\"),header = F,stringsAsFactors = F)
activities <- read.table(file = paste(baseDir,"activity_labels.txt",sep = "\\"),header = F,stringsAsFactors = F)
#Reading training data first, subject_train, xTrain and yTrain
subjectTrain <- read.table(file = paste(trainDir,"subject_train.txt",sep = "\\"),header = F)
xTrain <- read.table(file = paste(trainDir,"X_train.txt",sep = "\\"),header = F)
yTrain <- read.table(file = paste(trainDir,"y_train.txt",sep = "\\"),header = F,)
#Getting activity name for activity no
yTrainActivity <- merge(yTrain, activities, by.x="V1",by.y="V1", all=F,sort = F)
#naming x train based on deatures
names(xTrain) <- features[,2]
#Finding columns with mean and std
xTrainMean <- xTrain[,grep(pattern = "mean",names(xTrain))]
xTrainStd <- xTrain[,grep(pattern = "std",names(xTrain))]
finalXTrain <- c(xTrainMean, xTrainStd)
#Combining subject, activity and different mean and std measurements.
trainData <- data.frame(subject = subjectTrain[,1], activity = yTrainActivity[,2], finalXTrain)
#Similarly for test data
subjectTest <- read.table(file = paste(testDir,"subject_test.txt",sep = "\\"),header = F)
xTest <- read.table(file = paste(testDir,"X_test.txt",sep = "\\"),header = F)
yTest <- read.table(file = paste(testDir,"y_test.txt",sep = "\\"),header = F,)
yTestActivity <- merge(yTest, activities, by.x="V1",by.y="V1", all=F,sort = F)
names(xTest) <- features[,2]
xTestMean <- xTest[,grep(pattern = "mean",names(xTest))]
xTestStd <- xTest[,grep(pattern = "std",names(xTest))]
finalXTest <- c(xTestMean, xTestStd)
testData <- data.frame(subject = subjectTest[,1], activity = yTestActivity[,2], finalXTest)
#Combining both test and train data
galaxyData <- rbind(trainData, testData)
head(galaxyData)
}
cleanup()
baseDir <- "H:\\DataScienceWorkspace\\GettingAndCleaningData\\UCI HAR Dataset"
testDir <- paste(baseDir,"test",sep = "\\")
trainDir <- paste(baseDir,"train",sep = "\\")
#Reading features and activites, common to both test and training data.
features <- read.table(file = paste(baseDir,"features.txt",sep = "\\"),header = F,stringsAsFactors = F)
activities <- read.table(file = paste(baseDir,"activity_labels.txt",sep = "\\"),header = F,stringsAsFactors = F)
#Reading training data first, subject_train, xTrain and yTrain
subjectTrain <- read.table(file = paste(trainDir,"subject_train.txt",sep = "\\"),header = F)
xTrain <- read.table(file = paste(trainDir,"X_train.txt",sep = "\\"),header = F)
yTrain <- read.table(file = paste(trainDir,"y_train.txt",sep = "\\"),header = F,)
#Getting activity name for activity no
yTrainActivity <- merge(yTrain, activities, by.x="V1",by.y="V1", all=F,sort = F)
#naming x train based on deatures
names(xTrain) <- features[,2]
#Finding columns with mean and std
xTrainMean <- xTrain[,grep(pattern = "mean",names(xTrain))]
xTrainStd <- xTrain[,grep(pattern = "std",names(xTrain))]
finalXTrain <- c(xTrainMean, xTrainStd)
#Combining subject, activity and different mean and std measurements.
trainData <- data.frame(subject = subjectTrain[,1], activity = yTrainActivity[,2], finalXTrain)
#Similarly for test data
subjectTest <- read.table(file = paste(testDir,"subject_test.txt",sep = "\\"),header = F)
xTest <- read.table(file = paste(testDir,"X_test.txt",sep = "\\"),header = F)
yTest <- read.table(file = paste(testDir,"y_test.txt",sep = "\\"),header = F,)
yTestActivity <- merge(yTest, activities, by.x="V1",by.y="V1", all=F,sort = F)
names(xTest) <- features[,2]
xTestMean <- xTest[,grep(pattern = "mean",names(xTest))]
xTestStd <- xTest[,grep(pattern = "std",names(xTest))]
finalXTest <- c(xTestMean, xTestStd)
testData <- data.frame(subject = subjectTest[,1], activity = yTestActivity[,2], finalXTest)
#Combining both test and train data
galaxyData <- rbind(trainData, testData)
str(galaxyData)
aggregate(x = galaxyData,by = list(subject,activity),FUN = mean, data = galaxyData)
aggregate(x = galaxyData,by = list(galaxyData$subject,galaxyData$activity),FUN = mean, data = galaxyData)
simplified <- aggregate(x = galaxyData,by = list(galaxyData$subject,galaxyData$activity),FUN = mean, data = galaxyData)
str(simplified)
head(simplified)
galaxyData[galaxyData$subject==10 & galaxyData$activity == "LAYING",]
galaxyData[galaxyData$subject==10 & galaxyData$activity == "LAYING",1:3]
check <- galaxyData[galaxyData$subject==10 & galaxyData$activity == "LAYING",1:3]
str(check)
names(check)
mean(check$)
mean(check$tBodyAcc.mean...X)
table(simplified$subject)
table(simplified$subject,simplified$activity)
table(simplified$activity)
names(simplified)
table(simplified$subject,simplified$Group.2)
galaxyData[galaxyData$subject==1,1:3]
simplified[simplified$subject==1,1:3]
simplified[simplified$subject==1,1:5]
check <-galaxyData[galaxyData$subject==1,1:3]
mean(check$tBodyAcc.mean...X)
simplified <- aggregate(x = galaxyData,by = list(galaxyData$subject,galaxyData$activity),FUN = mean, data = galaxyData)
head(simplified)
baseDir <- "H:\\DataScienceWorkspace\\GettingAndCleaningData\\UCI HAR Dataset"
testDir <- paste(baseDir,"test",sep = "\\")
trainDir <- paste(baseDir,"train",sep = "\\")
#Reading features and activites, common to both test and training data.
features <- read.table(file = paste(baseDir,"features.txt",sep = "\\"),header = F,stringsAsFactors = F)
activities <- read.table(file = paste(baseDir,"activity_labels.txt",sep = "\\"),header = F,stringsAsFactors = F)
#Reading training data first, subject_train, xTrain and yTrain
subjectTrain <- read.table(file = paste(trainDir,"subject_train.txt",sep = "\\"),header = F)
xTrain <- read.table(file = paste(trainDir,"X_train.txt",sep = "\\"),header = F)
yTrain <- read.table(file = paste(trainDir,"y_train.txt",sep = "\\"),header = F,)
#Getting activity name for activity no
yTrainActivity <- merge(yTrain, activities, by.x="V1",by.y="V1", all=F,sort = F)
#naming x train based on deatures
names(xTrain) <- features[,2]
#Finding columns with mean and std
xTrainMean <- xTrain[,grep(pattern = "mean",names(xTrain))]
xTrainStd <- xTrain[,grep(pattern = "std",names(xTrain))]
finalXTrain <- c(xTrainMean, xTrainStd)
#Combining subject, activity and different mean and std measurements.
trainData <- data.frame(subject = subjectTrain[,1], activity = yTrainActivity[,2], finalXTrain)
#Similarly for test data
subjectTest <- read.table(file = paste(testDir,"subject_test.txt",sep = "\\"),header = F)
xTest <- read.table(file = paste(testDir,"X_test.txt",sep = "\\"),header = F)
yTest <- read.table(file = paste(testDir,"y_test.txt",sep = "\\"),header = F,)
yTestActivity <- merge(yTest, activities, by.x="V1",by.y="V1", all=F,sort = F)
names(xTest) <- features[,2]
xTestMean <- xTest[,grep(pattern = "mean",names(xTest))]
xTestStd <- xTest[,grep(pattern = "std",names(xTest))]
finalXTest <- c(xTestMean, xTestStd)
testData <- data.frame(subject = subjectTest[,1], activity = yTestActivity[,2], finalXTest)
#Combining both test and train data
galaxyData <- rbind(trainData, testData)
simplified <- aggregate(x = galaxyData[,-c(1:2)],by = list(galaxyData$subject,galaxyData$activity),FUN = mean, data = galaxyData)
simplified
check
head(galaxyData)
head(galaxyData)
head(galaxyData[,c(1:5)])
head(simplified[,c(1:5)])
check <- galaxyData[galaxyData$subject==10 & galaxyData$activity=="LAYING",]
mean(check$tBodyAcc.mean...X)
simplified <- aggregate(x = galaxyData[,-c(1:2)],by = list(galaxyData$subject,galaxyData$activity),FUN = mean, data = galaxyData)
head(simplified[,c(1:6)])
simplified <- aggregate(x = galaxyData[,-c(1:2)],by = list(galaxyData$subject,galaxyData$activity),FUN = mean, data = galaxyData)
names(simplified)[names(simplified)=="Group.1"] <- "subject"
names(simplified)[names(simplified)=="Group.2"] <- "activity"
head(simplified[,c(1:6)])
activity <- read.csv("activity.csv",stringsAsFactors=F)
activity$date <- as.Date(activity$date)
setwd("H:\DataScienceWorkspace\RepData_PeerAssessment1")
setwd("H:\\DataScienceWorkspace\\RepData_PeerAssessment1")
activity <- read.csv("activity.csv",stringsAsFactors=F)
activity$date <- as.Date(activity$date)
activity
head(activity)
aggregate(steps~date,activity,sum)
aggregate(steps~date,activity,mean)
activity[activity$date=="2012-10-02",]
activity[activity$date=="2012-10-02",activity$steps]
activity[activity$date=="2012-10-02",steps]
activity[activity$date=="2012-10-02",activity$steps]
activity[activity$date=="2012-10-02","steps"]
toCheck <- activity[activity$date=="2012-10-02","steps"]
mean(toCheck, na.rm = T)
median(toCheck, na.rm = T)
aggregate(steps~date,activity,median)
aggregate(steps~date,activity,mean)
activity[activity$date="2012-11-29",]
activity[activity$date=="2012-11-29",]
activity[activity$date=="2012-11-29","steps"]
toCheck <-activity[activity$date=="2012-11-29","steps"]
mean(toCheck, na.rm=T)
median(toCheck, na.rm=T)
aggregate(steps~date,activity,mean)
aggregate(steps~interval,activity,mean)
toCheck <- activity[activity$interval==2355,"steps"]
mean(toCheck, na.rm=T)
timePlot <- aggregate(steps~interval,activity,mean)
with(timePlot, plot(x = interval,y = steps,type = "l")
)
max(timePlot$steps)
timePlot[timePlot$steps== max(timePlot$steps),]
nrow(activity[is.na(activity),])
activity[is.na(activity),]
newActivity <- activity
newActivity
head(newActivity)
allNAs <- newActivity[is.na(newActivity),]
newActivity$steps <- if(is.na(newActivity) && newActivity$date== timePlot$interval ) timePot$steps else newActivity$steps
head(newActivity)
newActivity <- activity
newActivity$steps <- if(is.na(newActivity) && newActivity$interval== timePlot$interval ) timePot$steps else newActivity$steps
timePlot <- aggregate(steps~interval,activity,mean)
newActivity$steps <- if(is.na(newActivity) && newActivity$interval== timePlot$interval ) timePot$steps else newActivity$steps
newActivity$steps <- if(is.na(newActivity) && newActivity$interval== timePlot$interval ) timePlot$steps else newActivity$steps
head(newActivity)
head(timePlot)
table(allNAs$date)
newActivity[newActivity$date=="2012-10-08",]
activity[activity$date=="2012-10-08",]
stepsPerDay <- aggregate(steps~date,activity,sum)
hist(stepsPerDay$steps,xlab = "Total number of steps per day",breaks = nrow(stepsPerDay))
stepsPerDay <- aggregate(steps~date,newActivity,sum)
hist(stepsPerDay$steps,xlab = "Total number of steps per day",breaks = nrow(stepsPerDay))
stepsPerDay <- aggregate(steps~date,newActivity,sum)
stepsPerDay
aggregate(steps~date,activity,sum)
activity[activity$date=="2012-10-02",]
newActivity[newActivity$date=="2012-10-02",]
x <- 4
y <- 5
if(x==4 && y==5) print("Equal") else print("Not equal")
if(x==4 & y==5) print("Equal") else print("Not equal")
if(x==4 & y==4) print("Equal") else print("Not equal")
if(x==4 && y==4) print("Equal") else print("Not equal")
newActivity <- activity
newActivity$steps <- if(is.na(newActivity) && newActivity$interval== timePlot$interval ) timePlot$steps
newActivity[newActivity$date=="2012-10-02",]
newActivity <- activity
newActivity$steps[is.na(newActivity) && newActivity$interval== timePlot$interval] <- timePlot$steps
newActivity[newActivity$date=="2012-10-02",]
newActivity <- activity
allNAs <- is.na(activity),]
allNAs <- activity[is.na(activity),]
nrow(allNAs)
nonNAs <- activity[!is.na(activity),]
nrow(nonNAs)
allNAs$steps[allNAs$interval== timePlot$interval] <-   timePlot$steps
allNAs
allNAs[allNAs$interval==0,]
allNAs[allNAs$interval==5,]
newActivity <- merge(allNAs,nonNAs,all = T)
nrow(newActivity)
nrow(activity)
nrow(nonNAs)
nrow(allNAs)
nrow(activity[is.na(activity),])
nrow(activity[!is.na(activity),])
nrow(activity)
head(nonNAs)
nrow(nonNAs)
nrow(activity)
nrow(activity[!is.na(activity$steps),])
nrow(activity[is.na(activity$steps),])
allNAs <- activity[is.na(activity$steps),]
nonNAs <- activity[!is.na(activity$steps),]
nrow(allNAs)
allNAs$steps[allNAs$interval==timePlot$interval] <- timePlot$steps
allNAs[allNAs$interval==0,]
nrow(nonNAs)
newActivity <- merge(allNAs,nonNAs, all = T)
nrow(newActivity)
newActivity[newActivity$date=="2012-10-02",]
newActivity[newActivity$date=="2012-10-01",]
stepsPerDay <- aggregate(steps~date,newActivity,sum)
stepsPerDay
aggregate(steps~date,activity,sum)
stepsPerDay <- aggregate(steps~date,newActivity,sum)
hist(stepsPerDay$steps,xlab = "Total number of steps per day",breaks = nrow(stepsPerDay))
aggregate(steps~date,newActivity,mean)
aggregate(steps~date,activity,mean)
aggregate(steps~date,newActivity,median)
diff(aggregate(steps~date,newActivity,mean),aggregate(steps~date,activity,mean))
weekdays(newActivity$date)
weekdays(newActivity$date,abbreviate = T)
dayOfWeek <- weekdays(newActivity$date)
class(dayOfWeek)
dayOfWeek <- weekdays(newActivity$date)
dayOfWeek <- weekdays(newActivity$date,abbreviate = T)
weekend <- c("Sat","Sun")
weekDayFactor <- apply(X = dayOfWeek, FUN = {if(dayOfWeek %in% weekend) "Weekend" else "WeekDay"})
weekDayFactor <- if(dayOfWeek %in% weekend) "Weekend" else "WeekDay"
weekDayFactor <- sapply(X = dayOfWeek, FUN = {if(dayOfWeek %in% weekend) "Weekend" else "WeekDay"})
names(dayOfWeek)
class(dayOfWeek)
weekDayCheck <- function(x) {}
weekDayCheck <- function(x) {
if(x %in% weekend) return "Weekend" else return "WeekDay"
weekDayCheck <- function(x) {
+ if(x %in% weekend) return "Weekend" else return "WeekDay" }
weekDayFactor <- sapply(X = dayOfWeek, function(x) {if(dayOfWeek %in% weekend) "Weekend" else "WeekDay"})
weekDayFactor
newActivity$weekDay[if(weekdays(newActivity$date) %in% c("Sat","Sun")),] <- "weekend"
weekDays <- weekdays(newActivity$date)
class(weekDays)
check <- function(x) {}
check <- function(x) {
}
weekDays <- weekdays(newActivity$date,abbreviate = T)
check <- function(x) {
for(i in x) if(i %in% c("Sat","Sun")) "weekend" else "weekday"
}
check(weekDays)
check <- function(x) {
weekCheck <- character()
determine <- "weekday"
for(i in x) if(i %in% c("Sat","Sun")) determine <- "weekend"
weekCheck <- c(weekCheck, determine)
weekCheck
}
check(weekDays)
for(i in weekDays) print(i)
for(i in weekDays) if(i %in% c("Sat","Sun")) print("Weekend") else print("Weekday")
weekDayFactor <- character()
for(i in weekDays) if(i %in% c("Sat","Sun")) weekDayFactor <- c(weekDayFactor,"Weekend") else weekDayFactor <- c(weekDayFactor,"Weekday")
weekDayFactor
nrow(weekDayFactor)
length(weekDayFactor)
newActivity$weekDay <- weekDayFactor
head(newActivity)
weekdays(head(newActivity$date))
newActivity$weekDay <- as.factor(weekDayFactor)
str(newActivity)
aggregate(steps~interval,activity,mean)
aggregate(steps~interval~weekDay,activity,mean)
aggregate(steps~interval~weekDay,newActivity,mean)
aggregate(steps~interval+weekDay,newActivity,mean)
check <- aggregate(steps~interval+weekDay,newActivity,mean)
table(check$date)
table(check$interval)
check[check$interval==0,]
aggregate(steps~interval,activity,mean)
newTimePlot <- aggregate(steps~interval+weekDay,newActivity,mean)
plot(x = interval,y = steps,type = "n")
with(newTimePlot,plot(x = interval,y = steps,type = "n"))
with(newTimePlot[newTimePlot$weekDay=="weekend"],lines(x = interval,y = steps,col="blue"))
names(newTimePlot)
with(newTimePlot[newTimePlot$weekDay=="weekend"],lines(x = newTimePlot$interval,y = newTimePlot$steps,col="blue"))
with(newTimePlot[newTimePlot$weekDay=="weekday"],lines(x = newTimePlot$interval,y = newTimePlot$steps,col="red"))
with(newTimePlot[newTimePlot$weekDay=="weekend"],lines(x = newTimePlot$interval,y = newTimePlot$steps,col="blue"))
with(newTimePlot[newTimePlot$weekDay=="weekday"],lines(x = newTimePlot$interval,y = newTimePlot$steps,col="red"))
with(newTimePlot,plot(x = interval,y = steps,type = "l"))
with(newTimePlot[newTimePlot$weekDay=="weekday"],lines(x = newTimePlot$interval,y = newTimePlot$steps,col="red"))
